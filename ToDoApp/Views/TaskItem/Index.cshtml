@model List<ToDoApp.DTOs.TaskItemDetail>
@using ToDoApp.Data;

@{
    ViewData["Title"] = "Home Tarea";
}

<h1>Mis tareas</h1>

<!-- Botón para crear una nueva tarea -->
<div>
    <a asp-controller="TaskItem" asp-action="Create" class="btn btn-primary mb-4">Crear tarea</a>
</div>

<!-- Sección de tareas -->
<div class="container">
    @if (Model != null && Model.Any())
    {
        foreach (var task in Model)
        {
            <div class="card mb-3 w-100 @(task.IsCompleted ? "bg-light text-muted" : "")">
                <div class="card-body d-flex align-items-center justify-content-between gap-3 flex-wrap">

                    <!-- Checkbox -->
                    <input type="checkbox" style="transform: scale(1.5);" @(task.IsCompleted ? "checked" : "")
                        onchange="updateCompletion(@task.Id, this.checked)" />


                    <!-- Centro: Título, descripción y creación -->
                    <div class="flex-grow-1">
                        <h5 class="card-title mb-2">@task.Title?.ToUpper()</h5>
                        <p class="card-text mb-1"><b>Descripción:</b> @task.Description</p>
                        <p class="card-text"><b>Creada:</b> @task.CreatedAt.ToString("dd/MM/yyyy HH:mm")</p>
                    </div>

                    <!-- Derecha: Etiquetas -->
                    <div class="d-flex flex-column text-end">
                        <p class="mb-2">
                            @switch (task.Priority)
                            {
                                case TaskPriority.High:
                                    <span class="badge bg-danger">!!!</span>
                                    break;
                                case TaskPriority.Medium:
                                    <span class="badge bg-warning">!!</span>
                                    break;
                                case TaskPriority.Low:
                                    <span class="badge bg-success">!</span>
                                    break;
                            }
                        </p>
                        <p>
                            @if (!task.IsCompleted)
                            {
                                <span class="badge bg-primary">Pendiente</span>
                            }
                            else
                            {
                                <span class="badge bg-secondary">Completada</span>
                            }
                        </p>
                    </div>

                </div>
            </div>
        }
    }
    else
    {
        <div class="col-12">
            <p class="text-muted">No hay tareas registradas.</p>
        </div>
    }
</div>

<script>
    function updateCompletion(taskId, isChecked) {
        fetch(`/TaskItem/UpdateCompletion?id=${taskId}&completed=${isChecked}`, {
            method: 'POST'
        })
            .then(response => {
                if (!response.ok) {
                    alert("Error al actualizar la tarea.");
                } else {
                    location.reload(); // Recargar para ver los cambios
                }
            });
    }
</script>
